import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/Review.css';
import Modal from './Modal';
import Cookies from 'js-cookie';
import { confirmAlert } from 'react-confirm-alert';
import 'react-confirm-alert/src/react-confirm-alert.css'; // Î™®Îã¨ Ïä§ÌÉÄÏùº

const Review = ({ movieId, isLogined, reviews, reviewers }) => {
    const [content, setContent] = useState('');
    const [editContent, setEditContent] = useState('');
    const [likes, setLikes] = useState(Array(reviews.length).fill(0));
    const [modalInfo, setModalInfo] = useState(null);
    const [replyContent, setReplyContent] = useState('');
    const [editingIndex, setEditingIndex] = useState(null);
    const [replyIndex, setReplyIndex] = useState(null); // ÎãµÍ∏ÄÏùÑ ÏûëÏÑ±Ìï† Î¶¨Î∑∞ Ïù∏Îç±Ïä§
    const userKey = Cookies.get('userKey');
    const navigate = useNavigate();

    const formatDate = (dateTime) => {
        return dateTime.toString().replace('T', ' ').split('.')[0];
    };

    const handleOnSubmit = async () => {
        if (isLogined) {
            if (content) {
                const sendData = { movieKey: movieId, reviewContent: content };
                try {
                    await axios.post('/api/reviews/create', sendData, {
                        headers: { 'Content-Type': 'application/json' },
                        withCredentials: true,
                    });
                    alert("Î¶¨Î∑∞Î•º ÏûëÏÑ±ÌïòÏòÄÏäµÎãàÎã§.");
                    window.location.reload();
                } catch (err) {
                    if (err.response.status === 409) {
                        alert("ÏòÅÌôîÎãπ ÌïòÎÇòÏùò Î¶¨Î∑∞Îßå ÏûëÏÑ±ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.");
                    }
                    console.error(err);
                }
            } else {
                alert("ÎÇ¥Ïö©ÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî.");
            }
        } else {
            alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌïú ÏÑúÎπÑÏä§ÏûÖÎãàÎã§.');
            navigate('/login');
        }
    };

    const handleReplySubmit = (index) => {
        if (replyContent) {
            const updatedReviews = [...reviews];
            updatedReviews[index].replies = updatedReviews[index].replies || [];
            updatedReviews[index].replies.push(replyContent);
            setReplyContent('');
        } else {
            alert("ÎåìÍ∏Ä ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
        }
    };

    const handleDeleteReview = async(review) => {
        confirmAlert({
            title : 'Î¶¨Î∑∞ÏÇ≠Ï†ú',
            message: 'Î¶¨Î∑∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
            buttons: [
                {
                    label: 'Ïòà',
                    onClick: async()  => {
                        try {
                            let response = await axios({
                                method: 'delete',
                                url: '/api/reviews/delete',
                                params: { reviewKey : review.reviewKey },
                            });
                            alert('ÏÇ≠Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
                            window.location.reload();
                        } catch(err)    {
                            alert('ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§.');
                            console.log(err);
                        }
                    }
                }, {
                    label: 'ÏïÑÎãàÏò§',
                    onClick: () => alert('ÏÇ≠Ï†úÎ•º Ï∑®ÏÜåÌïòÏòÄÏäµÎãàÎã§.')
                }
            ]
        });
    }

    const handleEditReview = (index) => {
        // ÌòÑÏû¨ Ïù∏Îç±Ïä§Í∞Ä ÏàòÏ†ï Ï§ëÏù∏ Ïù∏Îç±Ïä§ÏôÄ Í∞ôÏúºÎ©¥ ÏàòÏ†ï Î™®Îìú Ï¢ÖÎ£å
        if (editingIndex === index) {
            setEditingIndex(null);
            setEditContent(''); // ÎÇ¥Ïö© Ï¥àÍ∏∞Ìôî
        } else {
            setEditingIndex(index);
            setEditContent(reviews[index].reviewContent); // ÏàòÏ†ïÌï† ÎÇ¥Ïö© Î∂àÎü¨Ïò§Í∏∞
        }
    };

    const handleEditSubmit = async (index) => {
        const editData = { reviewKey: reviews[index].reviewKey, reviewContent: editContent, movieKey : movieId};
        console.log(editData);
        if (editContent) {
            try {
                let response = await axios({
                    method: 'post',
                    url: '/api/reviews/create',
                    headers: { 'Content-Type' : 'application/json' },
                    data : JSON.stringify(editData),
                    withCredentials: true,
                });
                console.log(response.data);
                window.location.reload();
                alert("Î¶¨Î∑∞ Î≥ÄÍ≤Ω ÏôÑÎ£å.");
            } catch (err) {
                console.error(err);
            }
            setEditingIndex(null);
        } else {
            alert("ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
        }
    };

    const handleLike = (index) => {
        const updatedLikes = [...likes];
        updatedLikes[index] += 1;
        setLikes(updatedLikes);
    };

    const openModal = (reviewer) => {
        setModalInfo(reviewer);
    };

    const closeModal = () => {
        setModalInfo(null);
    };

    useEffect(() => {
        console.log(movieId);
        console.log(isLogined);
        console.log(reviews);
        console.log(reviewers);
    }, [])

    return (
        <div className="review-wrapper">
            <h2>Î¶¨Î∑∞ ÏûëÏÑ±</h2>
            <div className="review-section">
                <textarea
                    placeholder="ÏòÅÌôîÏóê ÎåÄÌïú ÏùòÍ≤¨ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
                    className="review-input"
                    onChange={(e) => setContent(e.target.value)}
                ></textarea>
                <button className="submit-review" onClick={handleOnSubmit}>
                    Î¶¨Î∑∞Îì±Î°ù
                </button>
            </div>
            {reviews && reviews.length > 0 ? (
                <div>
                    <h2>Î¶¨Î∑∞</h2>
                    <div className="existing-reviews">
                        {reviews.map((review, index) => (
                            <div className="review-details" key={index}>
                                <div className="review-header">
                                    <div className="user-info"
                                        onClick={() => openModal(reviewers[index])}>
                                        <img
                                            src={reviewers[index]?.userProfile || 'default-profile.png'}
                                            alt="ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ"
                                            className="user-profile"
                                        />
                                        <div className='user-infos'>
                                            <span className='review-username'>{reviewers[index]?.userName}</span>
                                            <span className='review-usergrade'>{reviewers[index]?.userGrade}</span>
                                        </div>
                                    </div>
                                    <div className="review-date">{formatDate(review.reviewTime)}</div>
                                </div>
                                {editingIndex === index ? (
                                    <div className="edit-content">
                                        <textarea
                                            value={editContent}
                                            onChange={(e) => setEditContent(e.target.value)}
                                        ></textarea>
                                        <button onClick={() => handleEditSubmit(index)}>Î¶¨Î∑∞ÏàòÏ†ï</button>
                                    </div>
                                ) : (
                                    <p className="review-content">{review.reviewContent}</p>
                                )}
                                <div className="review-actions">
                                    <div className='cud-buttons'>
                                        <button className='comment-button' onClick={() => setReplyIndex(replyIndex === index ? null : index)}>ÎãµÍ∏Ä</button>
                                        {
                                            userKey == reviewers[index].userKey ? (
                                            <>  
                                                <button className='update-button' onClick={() => handleEditReview(index)}>ÏàòÏ†ï</button>
                                                <button className='delete-button' onClick={() => handleDeleteReview(review)}>ÏÇ≠Ï†ú</button>
                                            </>
                                            ) : null // userKeyÍ∞Ä Îã§Î•º Í≤ΩÏö∞ ÏïÑÎ¨¥Í≤ÉÎèÑ Ï∂úÎ†•ÌïòÏßÄ ÏïäÏùå
                                        }
                                    </div>
                                    <button className="like-button" onClick={() => handleLike(index)}>
                                        Ï¢ãÏïÑÏöî üëç {likes[index]}
                                    </button>
                                </div>
                                {replyIndex === index && (
                                    <div className="reply-section">
                                        <textarea
                                        placeholder="ÎãµÍ∏ÄÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî."
                                        value={replyContent}
                                        onChange={(e) => setReplyContent(e.target.value)}
                                        />
                                        <button onClick={() => handleReplySubmit(index)}>ÎãµÍ∏ÄÏûëÏÑ±</button>
                                    </div>
                                    )}
                                    {review.replies && review.replies.length > 0 && (
                                    <div className="replies">
                                        {review.replies.map((reply, replyIdx) => (
                                        <div key={replyIdx} className="reply-item">
                                            <div className="reply-profile" onClick={() => openModal(reviewers[index])}>
                                            <img
                                                src={reviewers[replyIdx]?.userProfile || 'default-profile.png'}
                                                alt="ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ"
                                                className="reply-user-profile"
                                            />
                                            <span className="reply-username">{reviewers[replyIdx]?.userName}</span>
                                            <span className="reply-usergrade">{reviewers[replyIdx]?.userGrade}</span>
                                            </div>
                                                <div className="reply-content">
                                                    <div className="reply-header">
                                                        <span className="reply-time">Ïó¨Í∏∞Ïóê ÏûëÏÑ± ÏãúÍ∞ÑÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî</span>
                                                    </div>
                                                <p className="reply-text">{reply}</p>
                                                <div className='buttons-reply'>
                                                    <button className='update-button-reply' onClick={() => handleEditReview(index)}>ÏàòÏ†ï</button>
                                                    <button className='delete-button-reply' onClick={() => handleDeleteReview(review)}>ÏÇ≠Ï†ú</button>
                                                </div>
                                            </div>
                                        </div>
                                        ))}
                                    </div>
                                    )}
                            </div>
                        ))}
                    </div>
                </div>
            ) : (
                <h2 style={{ textAlign: 'center' }}>Î¶¨Î∑∞Í∞Ä ÏóÜÏñ¥Ïöî! ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî...</h2>
            )}
            {modalInfo && (
                <Modal isOpen={!!modalInfo} closeModal={closeModal} modalInfo={modalInfo} />
            )}
        </div>
    );
};

export default Review;
